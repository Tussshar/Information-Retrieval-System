/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.neu.irs.userInterface;

import com.neu.irs.bean.Doc;
import com.neu.irs.bean.Document;
import com.neu.irs.bean.DocumentCatalog;
import com.neu.irs.commonUtil.Porter;
import com.neu.irs.dataStructure.Graph;
import com.neu.irs.dataStructure.Graph.Node;
import com.neu.irs.dataStructure.Index;
import com.neu.irs.dataStructure.InvertedIndex;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author tusharkale1
 */
public class ParseJDialog extends javax.swing.JDialog {

    /**
     * Creates new form ParseJDialog
     */
    private ArrayList<File> selectedFiles;
    private ArrayList<Document> documentList;
    private ArrayList<Doc> docList;
    private InvertedIndex index;
    private Index newIndex;
    private ArrayList<String> stopList;
    private DocumentCatalog docCatalog;
    
    private Graph graph;

    public ParseJDialog(JFrame parent, boolean modal, ArrayList<File> selectedFiles, ArrayList<Document> documentList, InvertedIndex indexTable, ArrayList<Doc> docList, Index newIndex, ArrayList<String> stopList, DocumentCatalog docCatalog) {
        super(parent, modal);
        initComponents();

        this.selectedFiles = selectedFiles;
        this.documentList = documentList;
        this.docList = docList;
        this.newIndex = new Index();
        this.stopList = stopList;
        this.docCatalog = docCatalog;
       
        index = indexTable;
        graph = new Graph();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblImage = new javax.swing.JLabel();
        lblSelectMsg = new javax.swing.JLabel();
        txtFile2 = new javax.swing.JTextField();
        Browse1 = new javax.swing.JButton();
        txtFile1 = new javax.swing.JTextField();
        txtFile3 = new javax.swing.JTextField();
        txtFile6 = new javax.swing.JTextField();
        txtFile5 = new javax.swing.JTextField();
        txtFile4 = new javax.swing.JTextField();
        Browse3 = new javax.swing.JButton();
        Browse2 = new javax.swing.JButton();
        Browse5 = new javax.swing.JButton();
        Browse6 = new javax.swing.JButton();
        Browse4 = new javax.swing.JButton();
        btnParse = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lblImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/neu/irs/image/Database.jpg"))); // NOI18N

        lblSelectMsg.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lblSelectMsg.setText("Select the Files to be Parsed");
        lblSelectMsg.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        Browse1.setFont(new java.awt.Font("Phosphate", 1, 14)); // NOI18N
        Browse1.setText("Browse");
        Browse1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Browse1ActionPerformed(evt);
            }
        });

        Browse3.setFont(new java.awt.Font("Phosphate", 1, 14)); // NOI18N
        Browse3.setText("Browse");
        Browse3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Browse3ActionPerformed(evt);
            }
        });

        Browse2.setFont(new java.awt.Font("Phosphate", 1, 14)); // NOI18N
        Browse2.setText("Browse");
        Browse2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Browse2ActionPerformed(evt);
            }
        });

        Browse5.setFont(new java.awt.Font("Phosphate", 1, 14)); // NOI18N
        Browse5.setText("Browse");
        Browse5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Browse5ActionPerformed(evt);
            }
        });

        Browse6.setFont(new java.awt.Font("Phosphate", 1, 14)); // NOI18N
        Browse6.setText("Browse");
        Browse6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Browse6ActionPerformed(evt);
            }
        });

        Browse4.setFont(new java.awt.Font("Phosphate", 1, 14)); // NOI18N
        Browse4.setText("Browse");
        Browse4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Browse4ActionPerformed(evt);
            }
        });

        btnParse.setFont(new java.awt.Font("Phosphate", 1, 14)); // NOI18N
        btnParse.setText("Parse");
        btnParse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnParseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtFile2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtFile1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtFile3, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Browse1)
                            .addComponent(Browse2)
                            .addComponent(Browse3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtFile6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFile4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFile5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnParse, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(lblSelectMsg, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(130, 130, 130)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Browse4)
                    .addComponent(Browse5)
                    .addComponent(Browse6))
                .addGap(57, 57, 57))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(lblImage)
                .addGap(29, 29, 29)
                .addComponent(lblSelectMsg)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFile1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Browse1)
                    .addComponent(txtFile4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Browse4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFile2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFile5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Browse5)
                    .addComponent(Browse2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFile3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Browse6)
                    .addComponent(txtFile6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Browse3))
                .addGap(38, 38, 38)
                .addComponent(btnParse)
                .addContainerGap(70, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Browse2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Browse2ActionPerformed
        // TODO add your handling code here:

        JFileChooser fileChooser = new JFileChooser();
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            txtFile2.setText(file.getName());
            selectedFiles.add(file);
        }
    }//GEN-LAST:event_Browse2ActionPerformed

    private void Browse1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Browse1ActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            txtFile1.setText(file.getName());
            selectedFiles.add(file);
        }
    }//GEN-LAST:event_Browse1ActionPerformed

    private void Browse3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Browse3ActionPerformed
        // TODO add your handling code here:

        JFileChooser fileChooser = new JFileChooser();
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            txtFile3.setText(file.getName());
            selectedFiles.add(file);
        }
    }//GEN-LAST:event_Browse3ActionPerformed

    private void Browse4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Browse4ActionPerformed
        // TODO add your handling code here:

        JFileChooser fileChooser = new JFileChooser();
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            txtFile4.setText(file.getName());
            selectedFiles.add(file);
        }
    }//GEN-LAST:event_Browse4ActionPerformed

    private void Browse5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Browse5ActionPerformed
        // TODO add your handling code here:

        JFileChooser fileChooser = new JFileChooser();
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            txtFile5.setText(file.getName());
            selectedFiles.add(file);
        }
    }//GEN-LAST:event_Browse5ActionPerformed

    private void Browse6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Browse6ActionPerformed
        // TODO add your handling code here:

        JFileChooser fileChooser = new JFileChooser();
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            txtFile6.setText(file.getName());
            selectedFiles.add(file);
        }
    }//GEN-LAST:event_Browse6ActionPerformed

    private void btnParseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnParseActionPerformed
        // TODO add your handling code here:

        try {

            StringBuffer contentBuffer = null;
            Document document = null;
            Porter porter = new Porter();
            int parsingDocumentId;

            Doc doc = null;
            for (File file : selectedFiles) {

                doc = new Doc();
                doc.setName(file.getName());
                docList.add(doc);
                docCatalog.setTotalDocuments(docCatalog.getTotalDocuments() + 1);

                String path = file.getAbsolutePath();

                document = new Document(file.getName(), path);
                parsingDocumentId = document.getDocumentId();

                documentList.add(document);

                BufferedReader bufferedReader = new BufferedReader(new FileReader(file));
                contentBuffer = new StringBuffer();

                String line = bufferedReader.readLine();
                while (line != null) {
                    contentBuffer.append(line).append(" ");
                    line = bufferedReader.readLine();
                }

                String[] words = contentBuffer.toString().split(" ");

                String currentWord = "";
                Graph.Node node = null;
                Graph.Node previousNode = null;

                for (int i = 0; i < words.length; i++) {

                    if (!words[i].equals("")) {
                        //words[i] = CommonUtil.cleanString(words[i]);

                        currentWord = words[i].toLowerCase();
                        currentWord = porter.stripAffixes(currentWord);

                        if (!stopList.contains(currentWord)) {
                            doc.setDocumentWordCount(doc.getDocumentWordCount() + 1);
                            docCatalog.setTotalWordCount(docCatalog.getTotalWordCount() + 1);
                            document.setNumberOfWords(document.getNumberOfWords());

                            //Word Already present in InvertedIndex
                            if (index.getIndexTable().containsKey(currentWord)) {
                                node = index.getIndexTable().get(currentWord.toLowerCase());
                                if (!node.getDocumentIdList().contains(parsingDocumentId)) {
                                    node.getDocumentIdList().add(parsingDocumentId);
                                }
                            } else {
                            //Word not present in Inverted Index

                            //node = graph.new Node(currentWord);
                                //node.getDocumentIdList().add(parsingDocumentId);
                                node = graph.addVertex(currentWord, parsingDocumentId);
                                index.getIndexTable().put(currentWord, node);
                            }

                            if (!(null == previousNode)) {
                                graph.addEdge(previousNode, node);
                            }
                            previousNode = node;

//                            if (newIndex.table.containsKey(words[i].toLowerCase())) {
//                                HashMap<Integer, Integer> map = newIndex.table.get(currentWord.toLowerCase());
//                                if (map.containsKey(doc.getId())) {
//                                    map.put(doc.getId(), map.get(doc.getId()) + 1);
//                                } else {
//                                    map.put(doc.getId(), 1);
//                                }
//                                newIndex.table.put(currentWord.toLowerCase(), map);
//                            } else {
//                                HashMap<Integer, Integer> map = new HashMap<>();
//                                map.put(doc.getId(), 1);
//                                newIndex.table.put(currentWord.toLowerCase(), map);
//                            }
                        }

                    }//ifloop

                }
            }
            JOptionPane.showMessageDialog(null, "Data has been loaded successfully");
        } catch (Exception e) {
            e.printStackTrace();
        }

        for (String key : index.getIndexTable().keySet()) {

            if (index.getIndexTable().containsKey(key)) {
                System.out.println("Index table contains " + key);
                System.out.println("Printing Document List");

                Graph.Node check = index.getIndexTable().get(key);
                for (int id : check.getDocumentIdList()) {
                    System.out.println(id);
                }

                System.out.println("Next Node Values");

                for (Graph.Node n : check.getNextVertices()) {
                    System.out.println(n.getValue());
                }
            }
            System.out.println("-----------------------------");
        }
    }//GEN-LAST:event_btnParseActionPerformed

    /**
     * @param args the command line arguments
     */
    public void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ParseJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ParseJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ParseJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ParseJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ParseJDialog dialog = new ParseJDialog(new javax.swing.JFrame(), true, selectedFiles, documentList, index, docList, newIndex, stopList, docCatalog);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Browse1;
    private javax.swing.JButton Browse2;
    private javax.swing.JButton Browse3;
    private javax.swing.JButton Browse4;
    private javax.swing.JButton Browse5;
    private javax.swing.JButton Browse6;
    private javax.swing.JButton btnParse;
    private javax.swing.JLabel lblImage;
    private javax.swing.JLabel lblSelectMsg;
    private javax.swing.JTextField txtFile1;
    private javax.swing.JTextField txtFile2;
    private javax.swing.JTextField txtFile3;
    private javax.swing.JTextField txtFile4;
    private javax.swing.JTextField txtFile5;
    private javax.swing.JTextField txtFile6;
    // End of variables declaration//GEN-END:variables
}
